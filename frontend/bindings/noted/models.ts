// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../time/models.js";

export class Config {
    "name": string;
    "description"?: string;
    "repository"?: string;
    "homepage"?: string;
    "registry": { [_: string]: string };
    "author"?: string;

    /** Creates a new Config instance. */
    constructor($$source: Partial<Config> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("registry" in $$source)) {
            this["registry"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Config instance from a string or object.
     */
    static createFrom($$source: any = {}): Config {
        const $$createField4_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("registry" in $$parsedSource) {
            $$parsedSource["registry"] = $$createField4_0($$parsedSource["registry"]);
        }
        return new Config($$parsedSource as Partial<Config>);
    }
}

export class EditorState {

    /** Creates a new EditorState instance. */
    constructor($$source: Partial<EditorState> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new EditorState instance from a string or object.
     */
    static createFrom($$source: any = {}): EditorState {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new EditorState($$parsedSource as Partial<EditorState>);
    }
}

/**
 * Node represents a directory tree node.
 * Children are only populated for directories.
 */
export class Node {
    "name": string;
    "path": string;

    /**
     * "file" | "dir" | "symlink"
     */
    "type": string;
    "size": number;
    "modified": time$0.Time;
    "children"?: Node[];
    "isHidden": boolean;
    "extension"?: string;

    /** Creates a new Node instance. */
    constructor($$source: Partial<Node> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("path" in $$source)) {
            this["path"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = "";
        }
        if (!("size" in $$source)) {
            this["size"] = 0;
        }
        if (!("modified" in $$source)) {
            this["modified"] = null;
        }
        if (!("isHidden" in $$source)) {
            this["isHidden"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Node instance from a string or object.
     */
    static createFrom($$source: any = {}): Node {
        const $$createField5_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("children" in $$parsedSource) {
            $$parsedSource["children"] = $$createField5_0($$parsedSource["children"]);
        }
        return new Node($$parsedSource as Partial<Node>);
    }
}

export class Notespace {
    "config": Config | null;
    "path": string;

    /** Creates a new Notespace instance. */
    constructor($$source: Partial<Notespace> = {}) {
        if (!("config" in $$source)) {
            this["config"] = null;
        }
        if (!("path" in $$source)) {
            this["path"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Notespace instance from a string or object.
     */
    static createFrom($$source: any = {}): Notespace {
        const $$createField0_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("config" in $$parsedSource) {
            $$parsedSource["config"] = $$createField0_0($$parsedSource["config"]);
        }
        return new Notespace($$parsedSource as Partial<Notespace>);
    }
}

/**
 * StreamEvent is sent incrementally during scanning to update the UI.
 */
export class StreamEvent {
    /**
     * "node" | "done" | "error"`
     */
    "kind": string;
    "node"?: Node | null;
    "err"?: string;

    /** Creates a new StreamEvent instance. */
    constructor($$source: Partial<StreamEvent> = {}) {
        if (!("kind" in $$source)) {
            this["kind"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new StreamEvent instance from a string or object.
     */
    static createFrom($$source: any = {}): StreamEvent {
        const $$createField1_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("node" in $$parsedSource) {
            $$parsedSource["node"] = $$createField1_0($$parsedSource["node"]);
        }
        return new StreamEvent($$parsedSource as Partial<StreamEvent>);
    }
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
const $$createType1 = Node.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = Config.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = $Create.Nullable($$createType1);
